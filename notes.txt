Boost::bimap :
    Should add tags to make bimap more descriptive.

    Wrap boost map in a class to improve code clarity

    make mini classes around the clocks

    sfgui resource manager

does isCheckSafe take into account color?

since we ensure boost::sign won't return 0, could we have better results with a faster one?


 --is there a way to turn parts of code off?

For castle to work, it's not enough to update the cells - the boardManager must somehow receive a signal to adjust the rook's position.
Therefore, position will have a wasCastle bool member the value of which is set in it ctor,
which both boardMove and boardManager can check.

introduce an optional modifier on construction of move/position to avoid same color error on castling

make a move make function
checkmate checking
rook couldn't move bug

dummy cell

add enums instead of pieceCodes

use action maps for shortcuts: draw claims, switch to queen, autoresign for quick blitz games etc
still need to implement queening
and handling gameEnd

add get PGN functionality
add a resultCheck function so that the checks for checkmate/stalemate are not done twice

inCheck code can now be reused
write movefunction and bimap wrapper
sfgui resource manager

bug: checkmate was not detected

legalMoves, isCheckmate, isStalemate - check should only be done once

engine should check for promotion info with at.i

use a separate thread for engine

hasLegalMoves has to consider promotion

position should have std arrays

have pieces work with range based for

insert code in display loop that checks if it's ai's turn and if it has played its move, to avoid threads for now

enforce const-ness on position functions

profile




