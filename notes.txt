Boost::bimap :
    Should add tags to make bimap more descriptive.

    Wrap boost map in a class to improve code clarity

    make mini classes around the clocks

    sfgui resource manager

does isCheckSafe take into account color?

since we ensure boost::sign won't return 0, could we have better results with a faster one?


 --is there a way to turn parts of code off?


?introduce an optional modifier on construction of move/position to avoid same color error on castling

add enums instead of pieceCodes

use action maps for shortcuts: draw claims, switch to queen, autoresign for quick blitz games etc
still need to implement queening
and handling gameEnd

add get PGN functionality
add a resultCheck function so that the checks for checkmate/stalemate are not done twice

inCheck code can now be reused
write movefunction and bimap wrapper
sfgui resource manager

bug: checkmate was not detected

legalMoves, isCheckmate, isStalemate - check should only be done once

engine should check for promotion info with at.i

use a separate thread for engine

hasLegalMoves has to consider promotion

position should have std arrays

insert code in display loop that checks if it's ai's turn and if it has played its move, to avoid threads for now
engine while use timers will processing input

enforce const-ness on position functions

profile

is initialization done in order?

try catch for loading the engine

can put the clocks into their own layouter to make smaller



split up newGame into cleanup and init, so the latter can be used in ctor


add icons to move list

write a promotion handler mini-class

class with static enums that can be used for pieceCodes

is player able to resign after game ended?

have to write all drawing conditions now

Thor arrows
Play on Fics
animate piece movement, multiple pieces

names of properties can be put in a property tree to allow users to create their own

is knightLegal can be improved

make boardManager, guiManager, resourceManager etc non-copyable

a game class that holds info like humanboth, game ended etc
move list class, clock class, promotionHandler class

isCheck reusable?
on checkSafe: boardMove or completeMove?

communication with engine: Asio vs polling

boost signals

notebook for settings window

boost.Test

still need to ensure that while waiting for promotion choice the right clock is ticking

thor resource manager might not be necessary at the moment

the ONLY reason a move with opponent's color is legal on construction is for the purposes of checking castling
legitimacy
completeMove will now return false if the color hasn't been switched.
It's possible to make this check outside completeMove.

engine output + options

move list does not write rows correctly

error on promotion - user given the choice of promoted piece, then not allowed to move

piecesBimap can be lightened
check algorithm reuse
might need to change engine input to parse lines instead

BUG: When playing both colors, user resigning results in draw
ISSUE: New game assumes that a game was being played
ENHANCEMENT: string to col function can be put in bw header

auto-queen: could be possible to set it either client or server side

instead of passing row1, col1 etc pass a struct that can take init list?

make text pop after 50 lines
